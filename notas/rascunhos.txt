____________________________________________________________________________________________________________

Login:

<?php

include 'cliente.php';

$local = '127.0.0.1';
$user = 'root';
$pass = "";
$bank = 'supermercado';

$mysql = new mysqli($local, $user, $pass, $bank);

//Recebimento do email e da senha
$gmail =  $_POST['end'];
$passw =  $_POST['passw'];

//Verifica se o hash e a senha são os mesmos do banco
//$verif_passw = password_verify($passw,$hash_passw);

if ($mysql->connect_error != null) {
    die("Conexão não realizada");
} else {
   
    // Faz a pesquisa no banco
    $search = $mysql->prepare("SELECT * FROM comprador WHERE gmail = ?");
    $search->bind_param("s", $gmail);
    $search->execute();
    $datas = $search->get_result();

    $request = array("status" => "NaoEncontrado", "message" => "Não encontrado!");

    while ($row = mysqli_fetch_array($datas, MYSQLI_ASSOC)) {
        // Verifica se o gmail corresponde no banco de dados
        if ($gmail == $row["gmail"]) {
            if($passw == $row["senha"]){
                $request = array("status" => "Encontrado", "message" => "Encontrado!");
            }
            else{
                $request = array("status" => "SenhaErrada", "message" => "Senha incorreta!");
            }
            // Não é necessário continuar o loop, pois o gmail foi encontrado
            break;
        }    
    }

    // Retorna a resposta como JSON
    header('Content-Type: application/json');
    echo json_encode($request);
}

// Encerra a conexão com o banco de dados
$mysql->close();

?>
___________________________________________________________________________________________________________

<?php

$local = '127.0.0.1';
$user = 'root';
$pass = "";
$bank = 'supermercado';

$mysql = new mysqli($local, $user, $pass, $bank);

//Recebimento do email e da senha
$gmail =  $_POST['end'];
$passw =  $_POST['passw'];

if ($mysql->connect_error != null) {
    die("Conexão não realizada");
} else {

    /*Criação de condicional para verificar se o gmail está na tebala comprador ou vendeder

    $search_tables = $mysql->query("SELECT comprador.gmail, vendedor.gmail FROM comprador, vendedor WHERE comprador.gmail = ? AND vendedor.gmail = ?");*/
   
    // Faz a pesquisa no banco
    $search = $mysql->prepare("SELECT * FROM comprador WHERE gmail = ?");
    $search->bind_param("s", $gmail);
    $search->execute();
    $datas = $search->get_result();

    $request = array("status" => "NaoEncontrado", "message" => "Não encontrado!");

    while ($row = mysqli_fetch_array($datas, MYSQLI_ASSOC)) {
        // Verifica se o gmail corresponde no banco de dados
        if ($gmail == $row["gmail"]) {
            //Verifica se o hash e a senha são os mesmos do banco  
            if(password_verify($passw, $row["senha"]) == true){
                $request = array("status" => "Encontrado", "message" => "Encontrado!");
            }
            else{
                $request = array("status" => "SenhaErrada", "message" => "Senha incorreta!");
            }
            // Não é necessário continuar o loop, pois o gmail foi encontrado
            break;
        }    
    }

    // Retorna a resposta como JSON
    header('Content-Type: application/json');
    echo json_encode($request);
}

// Encerra a conexão com o banco de dados
$mysql->close();

?>
____________________________________________________________________________________________________________

Suporte

<?php
//Criação do cadastro para suporte . Este script cria para que a senha do suporte receba o tratamento de hash e seja inserido no banco criptografado
$local = '127.0.0.1';
$user = 'root';
$pass = "";
$bank = 'supermercado';

//Cria uma instância da classe mysqli
$mysql = new mysqli("$local", "$user", "$pass", "$bank");

$gmail = $_POST["gmail"];
$passw = $_POST["senha"];

//Essa variável vai ser inserida na coluna da senha
$hash_passw = password_hash($passw, PASSWORD_DEFAULT,);

if($mysql->connect_error != null){
    die("Erro na conexão");
}
else{

    //Chama uma outra classe para iniciar a classe mysqli e ter acesso a outros métodos do prepared statements
    $start = mysqli_stmt_init($mysql);

    //Coloca mais segurança na hora de inserir os dados
    mysqli_stmt_prepare($start, "INSERT INTO suporte (gmail, senha) VALUES (?,?)");

    //Organiza os dados na coluna determinada. A quantidade de 's' é a quantidade dos dados
    mysqli_stmt_bind_param($start, "ss", $gmail, $hash_passw);

    //Faz os comandos serem executados
    mysqli_stmt_execute($start);

    //Fecha as validações
    mysqli_stmt_close($start);
}

//Encerra a conexão com o banco de dados
mysqli_close($mysql);
?>
_________________________________________________________________________________________________________________________________

SUPORTE
 
<?php
// Criação do cadastro para suporte. Este script cria para que a senha do suporte receba o tratamento de hash e seja inserido no banco criptografado
$local = '127.0.0.1';
$user = 'root';
$pass = "";
$bank = 'supermercado';

// Cria uma instância da classe mysqli
$mysql = new mysqli($local, $user, $pass, $bank);

if ($mysql->connect_error != null) {
    die("Erro na conexão");
} else {
    // Instrução SQL de inserção
    $sql = "INSERT INTO suporte(gmail, senha) VALUES('su@gmail.com', '1357')";

    // Executa a instrução SQL
    if ($mysql->query($sql) === TRUE) {
        echo "Registro inserido com sucesso!";
    } else {
        echo "Erro ao inserir registro: " . $mysql->error;
    }
}

// Encerra a conexão com o banco de dados
$mysql->close();
?>

___________________________________________________________________________________________________________
 function Addition(){

/*Criação dos elementos: input, botão de salvar,o botão para deletar e a quebra de linha*/
let input = document.createElement("input")
let button_save = document.createElement('button')
let button_del = document.createElement('img')
let godfather = document.querySelector("body")//Elemento pai(padrinho)
let line = document.createElement('br')

input.className = 'setor'
godfather.appendChild(input)

button_save.className = 'save'
button_save.textContent = 'salvar'
button_save.type = 'submit'
godfather.appendChild(button_save)

button_del.className = 'del'
button_del.src = 'imgs-cad/cancel.svg'//ícone retirado do Google Icons
godfather.appendChild(button_del)

godfather.appendChild(line)

/*Se o input existir cria mais um*/
if(input){
    document.addEventListener("click", function(){
    let count = 0
    count++
    //Está criando sem ter colocado nome no setor anterior
});
}//Condicional input

//Iteração para que o comando de salvar seja executado mais vezes
for(let count = 0; count < 1; count++){
/*Funções do botão*/
button_save.addEventListener("click", function(){

    let name = input.value;
//Caixa onde vai ficar o setor
    let setor = document.createElement("span")
    setor.className = 'name'
    setor.innerHTML = `${name}`

/*O Chat me explicou que o input não pose apadrinhar outro elemento então ele tem que ser como um irmão para que esse irmão herde suas propriedades*/
    let brother = input.parentNode
    brother.appendChild(setor)
    
    input.style.display = 'none'

/*Essa parte iria deixar o tamanho dos botões conforme a largura da janela. Porém não funciona quando adapto as telas*/
    if(window.innerWidth <= 600){
    button_save.style.transform ='translate(58vw,38vh)'
    button_save.style.marginTop = '0.6%'
    button_del.style.transform = 'translate(76vw,38vh)'
    button_del.style.left = '2%'
    }//Condiiconal <=600
    else if(window.innerWidth >= 600 && window.innerWidth <=768){
    button_save.style.transform ='translate(68vw,20vh)'
    button_save.style.marginTop = '0'
    button_del.style.transform = 'translate(59vw,28vh)'
    button_del.style.left = '2%'
    }//Condiiconal >=600 e <=768

});//Botão salvar
}//Loop for
button_del.addEventListener("click" , function(){
console.log("Excluído")
});//Botão deletar
}//Funhção    


___________________________________________________________________________________________________________

setor.js com o database

/*O chat me aconselhou a criar uma outra função para criar os elementos um de cada vez, somente quando o botão salvar for clicado que deixa criar mais input do setor. CRUD*/

document.addEventListener("DOMContentLoaded", function(){

console.log("Script")

    /*Criação dos elementos: input, botão de salvar,o botão para deletar e a quebra de linha*/
    let input = document.createElement("input")
    let button_save = document.createElement('button')
    let button_del = document.createElement('img')
    let godfather = document.querySelector("form")//Elemento pai(padrinho)
    let line = document.createElement('br')

    input.className = 'setor'
    input.maxLength = '15'
    input.name = 'setor' //Utilizar para salvar no php
    godfather.appendChild(input)
                
    button_save.className = 'save'
    button_save.textContent = 'salvar'
    button_save.type = 'submit'
    godfather.appendChild(button_save)
                
    button_del.className = 'del'
    button_del.src = 'imgs-cad/cancel.svg'//ícone retirado do GoogIcons
    godfather.appendChild(button_del)
                
    godfather.appendChild(line)

document.querySelector('form').addEventListener("submit", function(e){

            e.preventDefault();

            const form = new FormData()
            form.append('setor' , input.value);

            //ajax
            $.ajax({
                url: '../php/setor.php',
                type: 'POST',
                data: form,
                processData: false, contentType: false
            }).done(function(result){
                /*O result vai valer como o $request*/
                if(result == "true"){
                    console.log("Teste 1: " , result)
                    //Vai ter a função de adicionar e de excluir.
                }
                else{
                    console.log("Teste 2: " , result)
                    //Cria uma linha para avisar que o setor não foi cadastradado por causa do requisito.
                    let phrase = document.createElement("p")
                    phrase.id = 'phrase'
                    phrase.innerHTML = 'Necessário nome com mais de 3 letras'
                    godfather.appendChild(phrase)
                    setTimeout(()=>{
                        phrase.style.display = 'none'
                    },4000)
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
                /*O .fail() serve para mostrar o erro caso exista*/
                console.log("Erro na requisição AJAX:", textStatus, errorThrown);
            });//ajax //done //fail          
        });//submit
});//DOMContentLoaded

html: <form action="../php/setor.php" method="post"></form>

<!--<script src="../javascript/jquery-3.7.1.min.js"></script>-->

php

setor.php 

<?php

$local = '127.0.0.1';
$user = 'root';
$passw = "";
$bank = 'supermercado';

$mysql = new mysqli("$local", "$user", "$passw", "$bank");

$setor_name = $_POST['setor'];

if($mysql->connect_error != null){
    die("Erro na conexão." . $connect->connect_error);
}
else{

    if(strlen($setor_name) > 3){

    //Inserção de dados
    $insert = "INSERT INTO setor (nome) VALUES ('$setor_name')";

    $query =  mysqli_query($mysql,$insert);

    echo "Setor " . $setor_name . " inserido";
    $request = true;
    
    }
    else{
        $request = false;
        echo " Nome de setor inválido " . $setor_name. strlen($setor_name) . " letras ";
    }
    echo json_encode($request);//Se comunica com o js. É uma string respondendo o valor "true" ou "false" entre aspas
}

mysqli_close($mysql)
?>
_________________________________________________________________________________________________________________________________


    if($_SERVER["REQUEST_METHOD"] == "POST"){
    
      $request = false;
      
    //$button_edit = $_POST['editar'];
    
      if(isset($button_edit)){
    
            //Chama uma outra classe para iniciar a classe mysqli e ter acesso a outros métodos prepared statements
            $start = mysqli_stmt_init($mysql);
    
            //Coloca mais segurança na hora de inserir os dados
            mysqli_stmt_prepare($start, "INSERT INTO produto(nome , codigo, peso,valor,quantidade,marca,imagem) VALUE(?,?,?,?,?,?,?)");
        
            //Organiza os dados na coluna determinada. A quantidade de 's' é a quantidade dos dados
            mysqli_stmt_bind_param($start, 'sssssss', $button_edit);
        
            //Faz os comandos serem executados
            mysqli_stmt_execute($start);
        
            //Fecha as validações
            mysqli_stmt_close($start);
    
            sleep(3);
            header('Location: /lista/supermercado/arquivo.html');//O endereço deve ser completo. Tive que por o redirecionamento aqui.
    
            $request = true;
      }
      header('Content-Type: application/json');
      echo json_encode($request);
    }
___________________________________________________________________________________________________________